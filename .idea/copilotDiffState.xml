<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/clumsychicken/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/clumsychicken/MainActivity.kt" />
              <option name="originalContent" value="package com.example.clumsychicken&#10;&#10;import com.example.clumsychicken.core.ui.theme.ClumsyChickenTheme&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import com.example.clumsychicken.core.navigation.GameMode&#10;import com.example.clumsychicken.core.navigation.Screen&#10;import com.example.clumsychicken.ui.loading.LoadingScreen&#10;import com.example.clumsychicken.ui.start.StartScreen&#10;import com.example.clumsychicken.ui.game.GameScreen&#10;import com.example.clumsychicken.ui.result.ResultScreen&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent { ClumsyChickenTheme { App() } }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun App() {&#10;    val nav = rememberNavController()&#10;    NavHost(navController = nav, startDestination = Screen.Start.route) {&#10;        composable(Screen.Start.route) {&#10;            StartScreen(&#10;                onPlayEasy = {&#10;                    nav.currentBackStackEntry?.savedStateHandle?.set(&quot;mode&quot;, GameMode.EASY)&#10;                    nav.navigate(Screen.Loading.route)&#10;                },&#10;                onPlayHard = {&#10;                    nav.currentBackStackEntry?.savedStateHandle?.set(&quot;mode&quot;, GameMode.HARD)&#10;                    nav.navigate(Screen.Loading.route)&#10;                }&#10;            )&#10;        }&#10;        composable(Screen.Loading.route) {&#10;            val mode = nav.previousBackStackEntry?.savedStateHandle?.get&lt;GameMode&gt;(&quot;mode&quot;) ?: GameMode.EASY&#10;            LoadingScreen(navController = nav, mode = mode)&#10;        }&#10;        composable(&#10;            route = Screen.Game.route,&#10;            arguments = listOf(navArgument(Screen.ARG_MODE) { type = NavType.StringType })&#10;        ) { backStackEntry -&gt;&#10;            val m = GameMode.valueOf(backStackEntry.arguments?.getString(Screen.ARG_MODE) ?: GameMode.EASY.name)&#10;            GameScreen(&#10;                mode = m,&#10;                onFinish = { score -&gt;&#10;                    nav.navigate(&quot;result/$score&quot;) {&#10;                        popUpTo(Screen.Game.route.substringBefore(&quot;/{&quot;)) { inclusive = true }&#10;                    }&#10;                },&#10;                onExit = { nav.navigate(Screen.Start.route) }&#10;            )&#10;        }&#10;        composable(&#10;            route = Screen.Result.route,&#10;            arguments = listOf(navArgument(Screen.ARG_SCORE) { type = NavType.IntType })&#10;        ) { entry -&gt;&#10;            val score = entry.arguments?.getInt(Screen.ARG_SCORE) ?: 0&#10;            ResultScreen(&#10;                score = score,&#10;                onPlayAgain = { nav.navigate(Screen.Start.route) },&#10;                onMainMenu = { nav.navigate(Screen.Start.route) }&#10;            )&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.clumsychicken&#10;&#10;import com.example.clumsychicken.core.ui.theme.ClumsyChickenTheme&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.runtime.Composable&#10;import androidx.navigation.NavType&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import androidx.navigation.navArgument&#10;import com.example.clumsychicken.core.navigation.GameMode&#10;import com.example.clumsychicken.core.navigation.Screen&#10;import com.example.clumsychicken.ui.loading.LoadingScreen&#10;import com.example.clumsychicken.ui.start.StartScreen&#10;import com.example.clumsychicken.ui.game.GameScreen&#10;import com.example.clumsychicken.ui.result.ResultScreen&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent { ClumsyChickenTheme { App() } }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun App() {&#10;    val nav = rememberNavController()&#10;    NavHost(navController = nav, startDestination = Screen.Start.route) {&#10;        composable(Screen.Start.route) {&#10;            StartScreen(&#10;                onPlayEasy = {&#10;                    nav.currentBackStackEntry?.savedStateHandle?.set(&quot;mode&quot;, GameMode.EASY)&#10;                    nav.navigate(Screen.Loading.route)&#10;                },&#10;                onPlayHard = {&#10;                    nav.currentBackStackEntry?.savedStateHandle?.set(&quot;mode&quot;, GameMode.HARD)&#10;                    nav.navigate(Screen.Loading.route)&#10;                }&#10;            )&#10;        }&#10;        composable(Screen.Loading.route) {&#10;            val mode = nav.previousBackStackEntry?.savedStateHandle?.get&lt;GameMode&gt;(&quot;mode&quot;) ?: GameMode.EASY&#10;            LoadingScreen(navController = nav, mode = mode)&#10;        }&#10;        composable(&#10;            route = Screen.Game.route,&#10;            arguments = listOf(navArgument(Screen.ARG_MODE) { type = NavType.StringType })&#10;        ) { backStackEntry -&gt;&#10;            val m = GameMode.valueOf(backStackEntry.arguments?.getString(Screen.ARG_MODE) ?: GameMode.EASY.name)&#10;            GameScreen(&#10;                mode = m,&#10;                onFinish = { score -&gt;&#10;                    nav.navigate(&quot;result/$score/${m.name}&quot;) {&#10;                        popUpTo(Screen.Game.route.substringBefore(&quot;/{&quot;)) { inclusive = true }&#10;                    }&#10;                },&#10;                onExit = { nav.navigate(Screen.Start.route) }&#10;            )&#10;        }&#10;        composable(&#10;            route = Screen.Result.route,&#10;            arguments = listOf(&#10;                navArgument(Screen.ARG_SCORE) { type = NavType.IntType },&#10;                navArgument(Screen.ARG_MODE) { type = NavType.StringType }&#10;            )&#10;        ) { entry -&gt;&#10;            val score = entry.arguments?.getInt(Screen.ARG_SCORE) ?: 0&#10;            val mode = GameMode.valueOf(entry.arguments?.getString(Screen.ARG_MODE) ?: GameMode.EASY.name)&#10;            ResultScreen(&#10;                score = score,&#10;                onPlayAgain = { nav.navigate(&quot;game/${mode.name}&quot;) },&#10;                onMainMenu = { nav.navigate(Screen.Start.route) }&#10;            )&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>